{"version":3,"sources":["queries/queries.js","components/TaskDetails.js","components/TaskList.js","components/AddTask.js","components/AddProject.js","App.js","index.js"],"names":["getTasksQuery","gql","getProjectsQuery","addTaskMutation","addProjectMutation","getTaskDetailQuery","graphql","options","props","variables","id","taskId","console","log","task","data","title","weight","project","className","tasks","map","item","displayTaskDetails","useState","selected","state","setState","loading","onClick","e","displayTasks","compose","name","description","projectId","inputs","setInputs","handleChange","newInputs","target","value","class","onSubmit","preventDefault","parseInt","refetchQueries","query","type","onChange","required","disabled","projects","displayProjects","inputsProject","setInputsProject","newInputsProject","client","ApolloClient","uri","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6aef7187.chunk.js","sourcesContent":["import {\n  gql\n} from 'apollo-boost';\n\nconst getTasksQuery = gql`\n{\n  tasks{\n    title\n    id\n  }\n}\n`;\n\nconst getProjectsQuery = gql`\n{\n  projects{\n    title\n    id\n  }\n}\n`;\n\nconst addTaskMutation = gql`\nmutation($title: String!, $weight:Int!, $description: String!, $projectId: ID!) {\n  addTask(title: $title, weight: $weight, description: $description, projectId: $projectId){\n    title\n    id\n    }\n }\n `;\n\n const addProjectMutation = gql`\n mutation($title: String!, $weight: Int!, $description: String!) {\n   addProject(title: $title, weight: $weight, description: $description){\n     title\n     id\n     }\n  }\n  `;\n\nconst getTaskDetailQuery = gql`\n   query($id: ID){\n     task(id: $id){\n     id\n     title\n     weight\n     description\n     project{\n       id\n       title\n       weight\n       description\n       tasks{\n        title\n        weight\n        id\n       }\n     }\n   }}\n `;\nexport {\n  getProjectsQuery,\n  getTasksQuery,\n  addTaskMutation,\n  getTaskDetailQuery,\n  addProjectMutation\n};\n","import {\n  graphql\n} from 'react-apollo';\nimport {\n  getTaskDetailQuery\n} from '../queries/queries';\n\nfunction TaskDetails(props) {\n  console.log(props);\n\n  function displayTaskDetails(){\n    const {task}=props.data;\n    if(task){\n      return(\n        <div>\n        <h2>{task.title}</h2>\n        <p>{task.weight}</p>\n        <p>{task.project.title}</p>\n        <p>All tasks of the project:</p>\n        <ul className=\"other-tasks\" >\n        {task.project.tasks.map(item => {\n          //if(item.id !== props.taskId){\n            return <li key={item.id}>{item.title}</li>\n          //}\n        })\n\n        }\n        </ul>\n        </div>\n      )\n    }\n    else {\n      return(\n        <div>No task selected...</div>\n      )\n    }\n  }\n  return ( <\n    div id = \"task-details\" >\n  {displayTaskDetails()}< /\n    div >\n  );\n}\n\n\nexport default graphql(getTaskDetailQuery, {\n  options: (props) => {\n    return {\n      variables: {\n        id: props.taskId\n      }\n    }\n  }\n})(TaskDetails);\n","import {\n  graphql\n} from 'react-apollo';\nimport {\n  useState,\n  //useEffect\n} from \"react\";\nimport {\n  getTasksQuery\n} from '../queries/queries';\n// components\nimport TaskDetails from './TaskDetails';\n\n\nfunction TaskList(props) {\n  const [state, setState] = useState({selected: null});\n\n  function displayTasks() {\n    console.log(props.data);\n    var data = props.data;\n\n    if (data.loading) {\n      return ( < div > Looading tasks... < /div>);\n      }\n      else {\n        return data.tasks.map(task => {\n            return ( < li key = {\n                task.id\n              }\n              onClick = {\n                (e) => {\n                  setState({\n                    selected: task.id\n                  });\n                }\n              } > {\n                task.title\n              } < /li>);\n            })\n        }\n      }\n\n      return ( <\n        div >\n        <\n        ul id = \"task-list\" > {\n          displayTasks()\n        } <\n        /ul> <\n        TaskDetails taskId = {state.selected}\n        / > <\n        /div>\n      );\n    }\n\n    export default graphql(getTasksQuery)(TaskList);\n","import {\n  useState,\n  //useEffect\n} from \"react\";\nimport {\n  graphql\n} from 'react-apollo';\nimport {\n  flowRight as compose\n} from 'lodash';\nimport {\n  getProjectsQuery,\n  addTaskMutation,\n  getTasksQuery\n} from '../queries/queries';\n\nfunction AddTask(props) {\n  //var projects= displayProjects();\n\n  const [inputs, setInputs] = useState({\n    title: '',\n    weight: 1,\n    description: '',\n    projectId: ''\n    //(projects!==undefined)?projects[0].id: null\n  });\n\n  /*useEffect(() => {\n\n  }, [])\n  useEffect(() => {\n\n  }, [inputs])\n*/\n  function displayProjects() {\n    //  console.log(props);\n    var data = props.getProjectsQuery;\n    if (data.loading) {\n      return ( < option > Loading projects... < /option>);\n      }\n      else {\n        return data.projects.map(project => {\n            return ( < option key = {\n                project.id\n              }\n              value = {\n                project.id\n              } > {\n                project.title\n              } < /option>);\n            })\n        }\n      }\n\n      const handleChange = (e) => {\n        const newInputs = {\n          ...inputs\n        };\n        newInputs[e.target.name] = e.target.value\n        setInputs(newInputs)\n      }\n      const submitForm = (e) => {\n        e.preventDefault();\n        console.log(addTaskMutation);\n        props.addTaskMutation({\n          variables: {\n            title: inputs.title,\n            weight: parseInt(inputs.weight),\n            description: inputs.description,\n            projectId: inputs.projectId,\n          },\n          refetchQueries: [{\n            query: getTasksQuery\n          }]\n        });\n\n        /*console.log({\n          ...inputs\n        });*/\n      }\n      return ( <\n          form class = \"task\"\n          id = \"add-task\"\n          onSubmit = {\n            submitForm\n          } >\n          <\n          div className = \"field\" >\n          <\n          label > Task title: < /label> <\n          input type = \"text\"\n          name = \"title\"\n          onChange = {\n            handleChange\n          }\n          value = {\n            inputs.title\n          }\n          required /\n          > < /\n          div > <\n          div className = \"field\" >\n          <\n          label > Weight: < /label> <\n          input type = \"number\"\n          name = \"weight\"\n          onChange = {\n            handleChange\n          }\n          value = {\n            inputs.weight\n          }\n          required /\n          > < /\n          div >\n          <\n          div className = \"field\" >\n          <\n          label > description: < /label> <\n          textarea name = \"description\"\n          onChange = {\n            handleChange\n          }\n          value = {\n            inputs.description\n          }\n          required /\n          > < /\n          div >\n          <\n          div className = \"field\" >\n          <\n          label > Project: < /label> <\n          select name = \"projectId\"\n          onChange = {\n            handleChange\n          }\n          value = {\n            inputs.projectId\n          }\n          required > < option value = \"\"\n          selected = \"selected\"\n          disabled = \"disabled\" > Select project < /option> {\n          displayProjects()\n        } <\n        /select> < /\n      div >\n        <\n        button > + < /button> < /\n      form >\n    );\n  }\n\n  export default compose(\n    graphql(getProjectsQuery, {\n      name: \"getProjectsQuery\"\n    }),\n    graphql(addTaskMutation, {\n      name: \"addTaskMutation\"\n    })\n  )(AddTask);\n","import {\n  useState,\n  //useEffect\n} from \"react\";\nimport {\n  graphql\n} from 'react-apollo';\nimport {\n  flowRight as compose\n} from 'lodash';\nimport {\n  addProjectMutation,\n  getProjectsQuery\n} from '../queries/queries';\n\nfunction AddProject(props) {\n\n  const [inputsProject, setInputsProject] = useState({\n    title: '',\n    weight: 1,\n    description:''\n\n  });\n\n  /*useEffect(() => {\n\n  }, [])\n  useEffect(() => {\n\n  }, [inputsProject])\n*/\n\n\n      const handleChange = (e) => {\n        const newInputsProject = {\n          ...inputsProject\n        };\n        newInputsProject[e.target.name] = e.target.value\n        setInputsProject(newInputsProject)\n      }\n      const submitForm1 = (e) => {\n        e.preventDefault();\n        console.log(addProjectMutation);\n        props.addProjectMutation({\n          variables: {\n             title: inputsProject.title,\n            weight: parseInt(inputsProject.weight),\n            description: inputsProject.description\n\n          },\n         refetchQueries: [{query: getProjectsQuery}]\n        });\n\n        /*console.log({\n          ...inputsProject\n        });*/\n      }\n      return ( <\n        form class = \"project\" id = \"add-project\"\n        onSubmit = {\n          submitForm1\n        } >\n        <\n        div className = \"field\" >\n        <\n        label > Project title: < /label> <\n        input type = \"text\"\n        name = \"title\"\n        onChange = {\n          handleChange\n        }\n        value = {\n          inputsProject.title\n        }\n        / > < /\n        div > <\n        div className = \"field\" >\n        <\n        label > Weight: < /label> <\n        input type = \"number\"\n        name = \"weight\"\n        onChange = {\n          handleChange\n        }\n        value = {\n          inputsProject.weight\n        }\n        / > < /\n        div >\n        <\n        div className = \"field\" >\n        <\n        label > description: < /label> <\n        textarea\n        name = \"description\"\n        onChange = {\n          handleChange\n        }\n        value = {\n          inputsProject.description\n        }\n        / > < /\n        div >\n        <\n        button > + < /button> < /\n        form >\n      );\n    }\n\n    export default compose(\n      graphql(getProjectsQuery, {\n        name: \"getProjectsQuery\"\n      }),\n      graphql(addProjectMutation, {\n        name: \"addProjectMutation\"\n      })\n    )(AddProject);\n","import ApolloClient from 'apollo-boost';\nimport {\n  ApolloProvider\n} from 'react-apollo';\n// components\nimport TaskList from './components/TaskList';\nimport AddTask from './components/AddTask';\nimport AddProject from './components/AddProject';\n\n// apollo client setup\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n});\n\nfunction App() {\n  return ( <\n    ApolloProvider client = {\n      client\n    } >\n\n    <\n    div id = \"main\" >\n    <div id=\"bg\" ></div>\n    <\n    h1 > Ninja 's Reading List</h1> <\n    TaskList / >\n    <\n    AddProject / >\n    <\n    AddTask / >\n    <\n    /div> < /\n    ApolloProvider >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}